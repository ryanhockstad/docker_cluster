version: '3'
services:

  node-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:${VER}
    hostname: node-1
    container_name: node-1
    environment:
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - cluster.name=${CLUSTER_NAME}
      - node.name=node-1
      - xpack.security.transport.ssl.certificate=${CERTS_DIR}/node-1/node-1.crt
      - xpack.security.transport.ssl.key=${CERTS_DIR}/node-1/node-1.key
      - xpack.security.transport.ssl.key_passphrase=${ELASTIC_KEY_PASSPHRASE}
      - xpack.security.http.ssl.certificate=${CERTS_DIR}/node-1/node-1.crt
      - xpack.security.http.ssl.key=${CERTS_DIR}/node-1/node-1.key
      - xpack.security.http.ssl.key_passphrase=${ELASTIC_KEY_PASSPHRASE}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - ${PUBLIC_ELASTIC_PORT}:9200
    volumes:
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./config/elasticsearch/unicast_hosts.txt:/usr/share/elasticsearch/config/unicast_hosts.txt
      - local_es1_data:/usr/share/elasticsearch/data
      - certs:${CERTS_DIR}
    networks:
      es_net:
        ipv4_address: 172.22.1.1
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  node-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:${VER}
    hostname: node-2
    container_name: node-2
    environment:
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - cluster.name=${CLUSTER_NAME}
      - node.name=node-2
      - xpack.security.transport.ssl.certificate=${CERTS_DIR}/node-2/node-2.crt
      - xpack.security.transport.ssl.key=${CERTS_DIR}/node-2/node-2.key
      - xpack.security.transport.ssl.key_passphrase=${ELASTIC_KEY_PASSPHRASE}
      - xpack.security.http.ssl.certificate=${CERTS_DIR}/node-2/node-2.crt
      - xpack.security.http.ssl.key=${CERTS_DIR}/node-2/node-2.key
      - xpack.security.http.ssl.key_passphrase=${ELASTIC_KEY_PASSPHRASE}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./config/elasticsearch/unicast_hosts.txt:/usr/share/elasticsearch/config/unicast_hosts.txt
      - certs:${CERTS_DIR}
      - local_es2_data:/usr/share/elasticsearch/data
    networks:
      es_net:
        ipv4_address: 172.22.1.2
  
  node-3:
    image: docker.elastic.co/elasticsearch/elasticsearch:${VER}
    # build:
    #   context: ./config/elasticsearch
    #   args: 
    #     VER: ${VER}
    #     PASS: ${ELASTIC_PASSWORD}
    hostname: node-3
    container_name: node-3
    environment:
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - cluster.name=${CLUSTER_NAME}
      - node.name=node-3
      - xpack.security.transport.ssl.certificate=${CERTS_DIR}/node-3/node-3.crt
      - xpack.security.transport.ssl.key=${CERTS_DIR}/node-3/node-3.key
      - xpack.security.transport.ssl.key_passphrase=${ELASTIC_KEY_PASSPHRASE}
      - xpack.security.http.ssl.certificate=${CERTS_DIR}/node-3/node-3.crt
      - xpack.security.http.ssl.key=${CERTS_DIR}/node-3/node-3.key
      - xpack.security.http.ssl.key_passphrase=${ELASTIC_KEY_PASSPHRASE}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./config/elasticsearch/unicast_hosts.txt:/usr/share/elasticsearch/config/unicast_hosts.txt
      - ./config/agent/service_account_token.txt:/usr/share/elasticsearch/config/service_account_token.txt
      - ./config/elasticsearch/entrypoint.sh:/usr/share/elasticsearch/entrypoint.sh
      - certs:${CERTS_DIR}
    # entrypoint:
    #   /usr/share/elasticsearch/entrypoint.sh
    networks:
      es_net:
        ipv4_address: 172.22.1.3

  wait_until_es_ready:
    image: docker.elastic.co/elasticsearch/elasticsearch:${VER}
    command: /usr/bin/true
    depends_on: {"node-1": {"condition": "service_healthy"}}

  kibana:
    build:
      context: ./config/kibana
      args: 
        VER: ${VER}
    hostname: kibana
    container_name: kibana
    environment: 
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: ${CERTS_DIR}/ca/ca.crt
      ELASTICSEARCH_SSL_CERTIFICATE: ${CERTS_DIR}/kibana/kibana.crt
      ELASTICSEARCH_SSL_KEY: ${CERTS_DIR}/kibana/kibana.key
      ELASTICSEARCH_SSL_KEYPASSPHRASE: ${KIBANA_KEY_PASSPHRASE}
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_CERTIFICATE: ${CERTS_DIR}/kibana/kibana.crt
      SERVER_SSL_KEY: ${CERTS_DIR}/kibana/kibana.key
      SERVER_SSL_KEYPASSPHRASE: ${KIBANA_KEY_PASSPHRASE}
      # FAKE: "TEST_VALUE"
    ports:
      - 5601:5601
    volumes:
      # - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kibana_config:/usr/share/kibana/config
      - certs:${CERTS_DIR}
    networks: 
      - 'es_net'
    depends_on: 
      - wait_until_es_ready
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:5601 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  wait_until_kib_ready:
    image: docker.elastic.co/kibana/kibana:${VER}
    command: /usr/bin/true
    depends_on: {"kibana": {"condition": "service_healthy"}}

  logstash:
    image: docker.elastic.co/logstash/logstash:${VER}
    container_name: logstash
    environment:
      # HTTP_HOST: 0.0.0.0
      LOG_PASS: ${LOGSTASH_KEY_PASSPHRASE}
      CERTS_DIR: ${CERTS_DIR}
    volumes:
      - ./config/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./config/logstash/pipelines:/usr/share/logstash/pipelines
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./example_data:/usr/share/logstash/logs
      - certs:${CERTS_DIR}
    networks:
      - 'es_net'
    depends_on: 
      - wait_until_kib_ready

  filebeat:
    image: docker.elastic.co/beats/filebeat:${VER}
    container_name: filebeat
    user: root
    environment:
      EXAMPLE_ENV_VAR: ${EXAMPLE_PATH}
      AK: ${AK}
      SAK: ${SAK}
    volumes:
      - ./config/filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./config/filebeat/modules.d:/usr/share/filebeat/modules.d
      - ./example_data/data:/usr/share/filebeat/data/
      - ./example_data:/var/example
      - nginx_logs:/var/log/nginx:ro
      - certs:${CERTS_DIR}
      # - /var/lib/docker/containers:/var/lib/docker/containers:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - 'es_net'
    depends_on: 
      - wait_until_kib_ready
    # command: setup --dashboards

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:${VER}
    container_name: metricbeat
    user: root
    environment:
      CERTS_DIR: ${CERTS_DIR}
    volumes:
      - ./config/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:${CERTS_DIR}
    networks:
      - 'es_net'
    depends_on: 
      - wait_until_kib_ready

  auditbeat:
    image: docker.elastic.co/beats/auditbeat:${VER}
    container_name: auditbeat
    user: root
    pid: host
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      CERTS_DIR: ${CERTS_DIR}
      AUDITBEAT_KEY_PASSPHRASE: ${AUDITBEAT_KEY_PASSPHRASE}
    volumes:
      - ./config/auditbeat/auditbeat.yml:/usr/share/auditbeat/auditbeat.yml:ro
      - certs:${CERTS_DIR}
    networks:
      - 'es_net'
    cap_add:
      - AUDIT_CONTROL
      - AUDIT_READ
    depends_on:
      - wait_until_kib_ready

  ## Enterprise search takes a bit to spin up, so I usually leave it commented out.
  # enterprise_search:
  #   image: docker.elastic.co/enterprise-search/enterprise-search:${VER}
  #   container_name: enterprise_search
  #   environment:
  #     - ENT_SEARCH_DEFAULT_PASSWORD=password
  #     - ent_search.external_url=http://${ENTERPRISE_IP}:${ENTERPRISE_PORT}
  #     - ent_search.listen_host=0.0.0.0
  #     - ent_search.listen_port=${ENTERPRISE_PORT}
  #     - elasticsearch.host='https://node-1:9200'
  #     - elasticsearch.username=elastic
  #     - elasticsearch.password=${ELASTIC_PASSWORD}
  #     - allow_es_settings_modification=true
  #     - secret_management.encryption_keys=[4a2cd3f81d39bf28738c10db0ca782095ffac07279561809eecc722e0c20eb09]
  #     - elasticsearch.ssl.enabled=true
  #     - elasticsearch.ssl.certificate_authority=/certs/ca/ca.crt
  #     - elasticsearch.ssl.certificate=/certs/enterprise_search/enterprise_search.crt
  #     - elasticsearch.ssl.key=/certs/enterprise_search/enterprise_search.key
  #     - elasticsearch.ssl.key_passphrase=${ENTERPRISE_KEY_PASSPHRASE}
  #     - elasticsearch.ssl.verify=true
  #     - ent_search.auth.native1.source=standard
  #   volumes:
  #     - certs:/certs
  #   ports:
  #     - 3002:3002
  #   restart: on-failure
  #   depends_on:
  #       - wait_until_es_ready

  nginx:
    image: nginx
    container_name: nginx
    ports: [8080:80]
    labels:
      co.elastic.metrics/module: nginx
      co.elastic.metrics/metricsets: stubstatus
      co.elastic.metrics/hosts: http://nginx:80/nginx_status
      co.elastic.metrics/period: 10s
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - nginx_logs:/var/log/nginx/
    networks: 
      - 'es_net'

volumes:
  local_es1_data:
  local_es2_data:
  nginx_logs:
  certs:
  kibana_config:
networks:
  es_net:
    external: true
